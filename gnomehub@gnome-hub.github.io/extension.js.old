const { GObject, St, Clutter, GLib, Gio } = imports.gi;

const ExtensionUtils = imports.misc.extensionUtils;
const Me = ExtensionUtils.getCurrentExtension();

const Main = imports.ui.main;
const PanelMenu = imports.ui.panelMenu;
const PopupMenu = imports.ui.popupMenu;
const MessageTray = imports.ui.messageTray;

let ogCountUpdate, ogDestroy;

const Dropdown = GObject.registerClass(
    class Dropdown extends PanelMenu.Button {
        _init() {
            super._init(0.0, 'gnome-hub');
            log("gnomehub: in indicator")

            // can choose between icon or label
            this._label = new St.Label({
                'y_align' : Clutter.ActorAlign.CENTER,
                'text': 'Hub',
                'style_class': 'label'
            });

            this.add_child(this._label);
            
            //notifications section 
            // call a function which returns a list of notifications with title and app name (that will replace list currently here)
            var notifications = ['Test1','Test2','Test3']
            for(var i = 0;i < notifications.length;i++){
                let notifMenuItem = new PopupMenu.PopupMenuItem(notifications[i]);
                this.menu.addMenuItem(notifMenuItem);
            }
            let source = Main.messageTray.getSources()
            log(source.length)            
            
            // add divider between sections
            this.menu.addMenuItem( new PopupMenu.PopupSeparatorMenuItem());
            
            // widgets section
            var widgetSection = new PopupMenu.PopupMenuItem('Widget');
            this.menu.addMenuItem(widgetSection);
            this.menu.addMenuItem( new PopupMenu.PopupSeparatorMenuItem());
            // settings section
            let settingsMenuItem = new PopupMenu.PopupMenuItem('Settings');
            settingsMenuItem.connect('activate', () => {
                ExtensionUtils.openPrefs();
            });
            this.menu.addMenuItem(settingsMenuItem); 
        }

        setText(text) {
            return this._label.set_text(text);
        }
    }
)

function updateMessageFile() {
    let sources = Main.messageTray.getSources();
    let fname = GLib.getenv("XDG_RUNTIME_DIR") + "/notifications";
    let file = Gio.file_new_for_path(fname);
    let fstream = file.replace(null, false, Gio.FileCreateFlags.NONE, null);

    for (let i = 0; i < sources.length; i++) {
     for (let n = 0; n < sources[i].notifications.length; n++) {
         let notif = sources[i].notifications[n];
		 log("gnomehub " + notif)
         let urg = "" + notif.urgency;
         if (notif.urgency == 0) {
             urg = "L"
         } else if (notif.urgency == 1) {
          urg = "N"
         } else if (notif.urgency == 3) {
          urg = "C"
         }
            let data = urg + " " + notif.title + " â€” " + notif.bannerBodyText;
            data = data.replace("\\", "\\\\").replace("\n", "\\n") + "\n"
            //fstream.write(data, null, data.length);
     }
    }
    fstream.close(null);
}

function _countUpdated() {
    let res = ogCountUpdate.call(this);

    updateMessageFile();
    return res;
}

function _destroy() {
    let res = ogDestroy.call(this);

    updateMessageFile();
    return res;
}


class Extension {
    constructor(uuid) {
        this._indicator = null;
        this._uui = uuid;
        log("gnomehub: In constructor");
    }

    enable() {
        this._indicator = new Dropdown();
        log("gnomehub: In enable")
        Main.panel.addToStatusArea(this._uuid, this._indicator, 0, 'right');

       ogCountUpdate = MessageTray.Source.prototype.countUpdated;
       ogDestroy = MessageTray.Source.prototype.destroy;

       MessageTray.Source.prototype.countUpdated = _countUpdated;
       MessageTray.Source.prototype.destroy = _destroy;
    }
    
    // REMINDER: It's required for extensions to clean up after themselves when
    // they are disabled. This is required for approval during review!
    disable() {
        log(`disabling ${Me.metadata.name}`);

        this._indicator.destroy();
        this._indicator = null;

       MessageTray.Source.prototype.countUpdated = ogCountUpdated;
       MessageTray.Source.prototype.destroy = ogDestroy;
       Main.panel._rightBox.remove_child(button);
    }
}

function init() {
    log(`initializing ${Me.metadata.name}`);
    
   // _messageList                = Main.panel.statusArea.dateMenu._messageList;
   return new Extension();
}


/*
const {St, Clutter} = imports.gi;
const Main = imports.ui.main;

let panelButton;

function init () {
    panelButton = new St.Bin({
        style_class : "panel-button",
    });

    let panelButtonText = new St.label({
        text : "Hello World",
        y_align: Clutter.ActorAlign.CENTER,
    });

    panelButton.set_child(panelButtonText);
}

function enable () {
    Main.panel._rightBox.insert_child_at_index(panelButton, 0);
}

function disable () {
    Main.panel._rightBox.remove_child(panelButton);
}
*/
